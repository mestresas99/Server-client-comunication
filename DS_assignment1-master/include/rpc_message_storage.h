/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _RPC_MESSAGE_STORAGE_H_RPCGEN
#define _RPC_MESSAGE_STORAGE_H_RPCGEN

#include <rpc/rpc.h>

#include <pthread.h>

#ifdef __cplusplus
extern "C" {
#endif


struct user_message { //user object with their respective attributes
	int result; //store the result obtained from operations
	char message[256]; //message transmitted
	char sender[256]; //specifying the message sender
};
typedef struct user_message user_message;

struct rpc_retrieve_user_message_1_argument { //struct to get the user message given an id
	char *username;
	int message_identifier;
};
typedef struct rpc_retrieve_user_message_1_argument rpc_retrieve_user_message_1_argument;

struct store_user_message_1_argument { //struct to store the user message given an sender and a message
	char *username;
	char *username_sender;
	char *message;
};
typedef struct store_user_message_1_argument store_user_message_1_argument;

struct delete_user_message_1_argument { //struct to delete the user message given an id
	char *username;
	int message_identifier;
};
typedef struct delete_user_message_1_argument delete_user_message_1_argument;

#define MESSAGE_STORAGE 99
#define MESSAGE_STORAGEVER 1

#if defined(__STDC__) || defined(__cplusplus)
#define rpc_register 1
extern  enum clnt_stat rpc_register_1(char *, int *, CLIENT *);
extern  bool_t rpc_register_1_svc(char *, int *, struct svc_req *);
#define rpc_unregister 2
extern  enum clnt_stat rpc_unregister_1(char *, int *, CLIENT *);
extern  bool_t rpc_unregister_1_svc(char *, int *, struct svc_req *);
#define rpc_user_exists 3
extern  enum clnt_stat rpc_user_exists_1(char *, int *, CLIENT *);
extern  bool_t rpc_user_exists_1_svc(char *, int *, struct svc_req *);
#define rpc_retrieve_last_identifier 4
extern  enum clnt_stat rpc_retrieve_last_identifier_1(char *, int *, CLIENT *);
extern  bool_t rpc_retrieve_last_identifier_1_svc(char *, int *, struct svc_req *);
#define rpc_retrieve_message_number 5
extern  enum clnt_stat rpc_retrieve_message_number_1(char *, int *, CLIENT *);
extern  bool_t rpc_retrieve_message_number_1_svc(char *, int *, struct svc_req *);
#define rpc_retrieve_user_message 6
extern  enum clnt_stat rpc_retrieve_user_message_1(char *, int , user_message *, CLIENT *);
extern  bool_t rpc_retrieve_user_message_1_svc(char *, int , user_message *, struct svc_req *);
#define store_user_message 7
extern  enum clnt_stat store_user_message_1(char *, char *, char *, int *, CLIENT *);
extern  bool_t store_user_message_1_svc(char *, char *, char *, int *, struct svc_req *);
#define delete_user_message 8
extern  enum clnt_stat delete_user_message_1(char *, int , int *, CLIENT *);
extern  bool_t delete_user_message_1_svc(char *, int , int *, struct svc_req *);
extern int message_storage_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define rpc_register 1
extern  enum clnt_stat rpc_register_1();
extern  bool_t rpc_register_1_svc();
#define rpc_unregister 2
extern  enum clnt_stat rpc_unregister_1();
extern  bool_t rpc_unregister_1_svc();
#define rpc_user_exists 3
extern  enum clnt_stat rpc_user_exists_1();
extern  bool_t rpc_user_exists_1_svc();
#define rpc_retrieve_last_identifier 4
extern  enum clnt_stat rpc_retrieve_last_identifier_1();
extern  bool_t rpc_retrieve_last_identifier_1_svc();
#define rpc_retrieve_message_number 5
extern  enum clnt_stat rpc_retrieve_message_number_1();
extern  bool_t rpc_retrieve_message_number_1_svc();
#define rpc_retrieve_user_message 6
extern  enum clnt_stat rpc_retrieve_user_message_1();
extern  bool_t rpc_retrieve_user_message_1_svc();
#define store_user_message 7
extern  enum clnt_stat store_user_message_1();
extern  bool_t store_user_message_1_svc();
#define delete_user_message 8
extern  enum clnt_stat delete_user_message_1();
extern  bool_t delete_user_message_1_svc();
extern int message_storage_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_user_message (XDR *, user_message*);
extern  bool_t xdr_rpc_retrieve_user_message_1_argument (XDR *, rpc_retrieve_user_message_1_argument*);
extern  bool_t xdr_store_user_message_1_argument (XDR *, store_user_message_1_argument*);
extern  bool_t xdr_delete_user_message_1_argument (XDR *, delete_user_message_1_argument*);

#else /* K&R C */
extern bool_t xdr_user_message ();
extern bool_t xdr_rpc_retrieve_user_message_1_argument ();
extern bool_t xdr_store_user_message_1_argument ();
extern bool_t xdr_delete_user_message_1_argument ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_RPC_MESSAGE_STORAGE_H_RPCGEN */
